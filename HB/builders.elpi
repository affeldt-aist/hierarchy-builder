/*        Hierarchy Builder: algebraic hierarchies made easy
    This software is released under the terms of the MIT license              */

namespace builders {

pred begin i:context-decl.
begin CtxSkel :- std.do! [
  Name is "Builders_" ^ {std.any->string {new_int}}, % TODO?
  if-verbose (coq.say "HB: begin module for builders"),
  log.coq.env.begin-module Name,

  std.assert-ok! (builders.private.elaborate-context-skel->factory CtxSkel Ctx GRF) "Context illtyped",

  % the Super module to access operations/axioms shadowed by the ones in the factory
  if (GRF = indt FRecord) (std.do! [
    if-verbose (coq.say "HB: begin module Super"),
    log.coq.env.begin-module "Super",
    std.forall {coq.CS.canonical-projections FRecord} builders.private.declare-shadowed-constant,
    log.coq.env.end-module-name "Super" _,
    if-verbose (coq.say "HB: ended module Super")
  ]) (true),

  log.coq.env.begin-section Name,
  if-verbose (coq.say "HB: postulating factories"),
  builders.private.postulate-factories Name Ctx,
].

}

% "end" is a keyword, be put it in the namespace by hand
pred builders.end.
builders.end :- std.do! [
  current-mode (builder-from _ GR ModName),

  log.coq.env.end-section-name ModName,

  findall-builders LFIL,

  std.fold LFIL [] builders.private.declare-1-builder Clauses,

  if (Clauses = [])
     (coq.error "No builders to declare, did you forget HB.instance?")
     true,

  % TODO: Do we need this module?
  gref->modname GR M,
  Name is M ^ "_Exports",
  log.coq.env.begin-module Name,
  std.forall Clauses (c\ log.coq.env.accumulate current "hb.db" (clause _ _ c)),

  log.coq.env.end-module-name Name Exports,
  log.coq.env.end-module-name ModName _,
  export.module Exports,
].

/* ------------------------------------------------------------------------- */
/* ----------------------------- private code ------------------------------ */
/* ------------------------------------------------------------------------- */

namespace builders.private {

% [declare-1-builder (builder _ F M B) From MoreFrom] Given B of type FB, it
% declares all the new builders F to M via B.
% From holds the (from F Mi Bi) new clauses during folding.
pred declare-1-builder i:builder, i:list prop, o:list prop.
declare-1-builder (builder _ SrcFactory TgtMixin _) FromClauses FromClauses :- FromClauses => from SrcFactory TgtMixin _, !,
  if-verbose (coq.say "HB: skipping duplicate builder from"
    {nice-gref->string SrcFactory} "to" {nice-gref->string TgtMixin}).
declare-1-builder (builder _ SrcFactory TgtMixin B) FromClauses [from SrcFactory TgtMixin B|FromClauses] :-
  if-verbose (coq.say "HB: declare builder from"
    {nice-gref->string SrcFactory} "to" {nice-gref->string TgtMixin}).

% We add breviations for all constants what will be shadowed by projections
% if the factory.
pred declare-shadowed-constant i:option constant.
declare-shadowed-constant none.
declare-shadowed-constant (some C) :-
  coq.gref->id (const C) Id,
  std.forall {coq.locate-all Id} (declare-shadowed-located Id).

pred declare-shadowed-located i:string, i:located.
declare-shadowed-located Id (loc-gref GR) :-
  @global! => log.coq.notation.add-abbreviation Id 0 (global GR) ff _.
declare-shadowed-located Id (loc-abbreviation Abbrev) :-
  coq.notation.abbreviation-body Abbrev NArgs T,
  @global! => log.coq.notation.add-abbreviation Id NArgs T ff _.

% Elaborating factory (F Params T) is hard, since we don't have (yet) all the structures
% on T that makes the phat abbreviation (F Params T), which unfolds to (F_phant Params T _ idfun...)
% actually typecheck. So we purge all idfun disabling the inference of canonical mixins
% over T the factory depends on
pred elaborate-context-skel->factory i:context-decl, o:context-decl, o:factoryname, o:diagnostic.
elaborate-context-skel->factory
  (context-item IDT IT TTySkel none t\ context-item IDF IF (TFSkel t) none _\ context-end)
  (context-item IDT IT TTy none t\ context-item IDF IF (TFSkel t) none _\ context-end) GRF Diag
:- !, std.do-ok! Diag [
  coq.elaborate-ty-skeleton TTySkel _ TTy,
  (d\ coq.id->name IDT NameT),
  (d\ @pi-decl NameT TTy t\ purge-id (TFSkel t) (TFSkel1 t), coq.elaborate-ty-skeleton (TFSkel1 t) _ (TF1 t) d),
  (d\ @pi-decl NameT TTy t\ std.assert! (factory? (TF1 t) (triple GRF _Params t)) "the last argument must be a factory applied to the type variable"),
].
elaborate-context-skel->factory (context-item ID I TSkel none C) (context-item ID I T none C1) GRF Diag :- !, std.do-ok! Diag [
  coq.elaborate-ty-skeleton TSkel _ T,
  (d\ coq.id->name ID Name),
  (d\ @pi-decl Name T x\ elaborate-context-skel->factory (C x) (C1 x) GRF d),
].
elaborate-context-skel->factory (context-item ID _ _ (some _) _) _ _ _ :-
  coq.error "context item cannot be given a body:" ID.

pred postulate-factory-abbrev i:term, i:list term, i:id, i:factoryname, o:term.
postulate-factory-abbrev TheType Params Name Falias TheFactory :- std.do! [
  factory-alias->gref Falias F,
  phant-abbrev F _ Fabv,
  coq.notation.abbreviation Fabv {std.append Params [TheType]} Package,
  Msg is "Unable to declare factory " ^ Name,
  std.assert-ok! (coq.typecheck-ty Package _) Msg,
  log.coq.env.add-section-variable-noimplicits Name Package C,
  TheFactory = global (const C),
].

% Only record fields can be exported as operations.
pred define-factory-operations i:term, i:list term, i:term, i:gref.
define-factory-operations TheType Params TheFactory (indt I) :- !,
  coq.env.indt I _ NIParams _ _ _ _,
  NHoles is NIParams - 1 - {std.length Params},
  coq.CS.canonical-projections I PL,
  std.forall PL (define-factory-operation TheType Params TheFactory NHoles).
define-factory-operations _ _ _ _.

pred define-factory-operation i:term, i:list term, i:term, i:int, i:option constant.
define-factory-operation _ _ _ _ none.
define-factory-operation TheType Params TheFactory NHoles (some P) :-
  coq.mk-n-holes NHoles Holes,
  std.append Holes [TheFactory] Holes_Factory,
  std.append Params [TheType|Holes_Factory] Args,
  T = app[global (const P)|Args],
  std.assert-ok! (coq.typecheck T _) "Illtyped applied factory operation",
  coq.gref->id (const P) Name,
  @local! => log.coq.notation.add-abbreviation Name 0 T ff _.

pred fresh-type o:term.
fresh-type Ty :-
  Ty = {{Type}},
  std.assert-ok! (coq.typecheck-ty Ty _) "impossible".

pred postulate-factories i:id, i:context-decl.
postulate-factories ModName (context-item IDT _ TySkel none t\ context-item IDF _ (TF t) none _\ context-end) :- !, std.do! [
  % TODO we should allow T to be anything.
  std.assert-ok! (coq.elaborate-ty-skeleton TySkel _ Ty) "builders-postulate-factory: illtyped context",
  if (var Ty) (fresh-type Ty)
     (std.assert-ok! (coq.unify-eq Ty {{Type}}) "The last context item before the factory must be a type variable"),
  if-verbose (coq.say "HB: postulating type" IDT),
  log.coq.env.add-section-variable-noimplicits IDT Ty C,
  TheType = global (const C),

  std.assert! (factory? (TF TheType) (triple GRF Params TheType))
    "the last argument must be a factory applied to the type variable",
  gref-deps GRF GRFMLwP, % TODO: remove, pass to context.declare the list-w-params-eta-expansion of GRF
  context.declare TheType Params GRFMLwP _ _,
  postulate-factory-abbrev TheType Params IDF GRF TheFactory,
  define-factory-operations TheType Params TheFactory GRF,
  log.coq.env.accumulate current "hb.db" (clause _ _ (current-mode (builder-from TheFactory GRF ModName))),
  if-verbose (coq.say "Adding clause @using!" IDF "to the context"),
  log.coq.env.accumulate current "hb.db" (clause _ _ (@using! IDF))
].

postulate-factories ModName (context-item ID _ TSkel none Factories) :- std.do! [
  if-verbose (coq.say "HB: postulating" ID),
  std.assert-ok! (coq.elaborate-ty-skeleton TSkel _ T) "postulate-factories: illtyped context",
  if (var T) (coq.fresh-type T) true,
  log.coq.env.add-section-variable-noimplicits ID T P,
  TheParam = global (const P),
  postulate-factories ModName (Factories TheParam),
].

postulate-factories _ (context-item ID _ _ (some _) _) :-
  coq.error "context item cannot be given a body:" ID.

}
